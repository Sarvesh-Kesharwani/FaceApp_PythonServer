
"""

server = ServerSocket(Port)
System.out.println("Server started")
System.out.println("Waiting for a client ...")
socket = server.accept()
System.out.println("Client accepted")

sin  = socket.getInputStream()
sout = socket.getOutputStream()
dis = DataInputStream(sin)
insr = InputStreamReader(socket.getInputStream())
mBufferIn = BufferedReader(insr)

while True:
    mServerMessage = mBufferIn.readLine()
    if mServerMessage != null:
        # Check if data is image
        #print(mServerMessage)
        if mServerMessage == "?start":
            print("?start was recieved:...")
            # Get length of image byte array
            size = int(mBufferIn.readLine())
            print("new_photo_size is:"+str(size))

            # Create buffers
            # Reading photo from dataipnutstream
            bytesRead = 0
            length = 0
            buffer = []
            buffer_length = 1024
            baos = BAOS()

            print("Reading Photo From Stream...")
            print("Image is : ")
            #print(type(mBufferIn.readLine()))

            while length < photo_length_int:
                print("Remaining bytes to fetch is: " + str(Math.min(buffer_length, (photo_length_int - length))))
                bytesRead = mBufferIn.read(buffer, 0, Math.min(buffer_length, (photo_length_int - length)))
                length += bytesRead
                # baos.write(buffer, 0, bytesRead)
                print("...")

            byte1 = mBufferIn.readLine()
            byte2 = bytes(byte1, 'utf-8')
            print("byte2 type is:"+str(type(byte2)))

            fileName = "MyFirstReceivedFile"
            file = File(fileName + str(Math.random() * 500) + ".png")
            if not file:
                file.createNewFile()

            fos = FileOutputStream(file)
            fos.write(byte2)
            fos.close()
            print("Image Received")
            #im = Image.open(StringIO(img_buff))
            #im.save("recievedImage.png")
        #else:
            #print("Not equal to ?start....")
    else:
        print("message is empty....")

#socket.close()
#server.close()
"""














def recievePhoto():
    # reading photo length
    s.listen(999)
    print("socket is listening...")
    clientsocket, address = s.accept()
    print(f"Connection from {address} has been established!")

    photo_length_list = []
    while True:
        tempbyte = clientsocket.recv(1).decode()
        print(tempbyte)
        if tempbyte != '$':
            photo_length_list.append(tempbyte)
        else:
            break
    photo_length = np.array(photo_length_list)
    photo_length_string = ''.join(photo_length)
    photo_length_int = int(photo_length_string)
    print("Photo_length is :" + photo_length_string)
    clientsocket.close()
    # s.close()

    s.listen(999)
    print("socket is listening...")
    clientsocket, address = s.accept()
    print(f"Connection from {address} has been established!")

    i = 1
    tempbytes = []
    while i != 194:
        tempbytes.append(clientsocket.recv(259))
        i += 1
    # print(tempbytes)
    tempbytesarray = np.array(tempbytes)
    print(tempbytesarray)
    print(type(tempbytesarray))
    # print(type(tempbytes))

    stream = BytesIO(tempbytesarray)

    image = Image.open(stream).convert("RGBA")
    stream.close()
    image.save('out.png')
    clientsocket.close()